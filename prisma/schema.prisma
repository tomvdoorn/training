generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String            @id @default(cuid())
    firstName        String?
    lastName         String?
    email            String?           @unique
    emailVerified    DateTime?
    password         String?
    image            String?
    accounts         Account[]
    sessions         Session[]
    exercises        Exercise[]
    templates        Template[]
    trainingPlans    TrainingPlan[]
    trainingSessions TrainingSession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum MuscleGroup {
    Legs
    Chest
    Back
    Shoulders
    Hamstrings
    Calves
    Lats
    Triceps
    Biceps
}

model Exercise {
    id          Int                @id @default(autoincrement())
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
    name        String
    category    ExerciseCategory   @relation(fields: [categoryId], references: [id])
    categoryId  Int
    description String?
    muscleGroup MuscleGroup?
    image       String?
    video       String?
    type        String
    user        User?              @relation(fields: [userId], references: [id])
    userId      String?
    templates   TemplateExercise[]
    sessions    SessionExercise[]
}

model ExerciseCategory {
    id        Int        @id @default(autoincrement())
    name      String     @unique
    exercises Exercise[]
}

model Template {
    id     Int    @id @default(autoincrement())
    name   String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    exercises        TemplateExercise[]
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt
    plans            TrainingPlanTemplate[]
    trainingSessions TrainingSession[]
}

model TemplateExercise {
    id               Int                   @id @default(autoincrement())
    createdAt        DateTime              @default(now())
    updatedAt        DateTime              @updatedAt
    template         Template              @relation(fields: [templateId], references: [id])
    templateId       Int
    exercise         Exercise              @relation(fields: [exerciseId], references: [id])
    exerciseId       Int
    order            Int
    sets             TemplateExerciseSet[]
    supersetWith     TemplateExercise?     @relation("Superset", fields: [supersetWithId], references: [id])
    supersetWithId   Int?                  @unique
    supersettedBy    TemplateExercise?     @relation("Superset")
    defaultRestTimer Int?
}

enum SetType {
    Warmup
    Regular
    Dropset
    Superset
    Partials
}

model TemplateExerciseSet {
    id                 Int              @id @default(autoincrement())
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    templateExercise   TemplateExercise @relation(fields: [templateExerciseId], references: [id])
    templateExerciseId Int
    reps               Int              @default(0)
    weight             Float?
    duration           Int?
    distance           Float?
    type               SetType          @default(Regular)
    rpe                Int?
    video              String?
}

model TrainingSession {
    id         Int               @id @default(autoincrement())
    createdAt  DateTime          @default(now())
    updatedAt  DateTime          @updatedAt
    user       User              @relation(fields: [userId], references: [id])
    userId     String
    template   Template?         @relation(fields: [templateId], references: [id])
    templateId Int?
    startTime  DateTime
    endTime    DateTime
    completed  Boolean           @default(false)
    exercises  SessionExercise[]
}

model SessionExercise {
    id           Int                  @id @default(autoincrement())
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
    session      TrainingSession      @relation(fields: [sessionId], references: [id])
    sessionId    Int
    exercise     Exercise             @relation(fields: [exerciseId], references: [id])
    exerciseId   Int
    sets         SessionExerciseSet[]
    notes        String?
    persistNotes Boolean              @default(false)
}

model SessionExerciseSet {
    id                Int             @id @default(autoincrement())
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
    sessionExercise   SessionExercise @relation(fields: [sessionExerciseId], references: [id])
    sessionExerciseId Int
    reps              Int
    weight            Float?
    duration          Int?
    distance          Float?
    type              SetType
    rpe               Int?
    video             String?
    completed         Boolean         @default(false)
}

model TrainingPlan {
    id        Int                    @id @default(autoincrement())
    createdAt DateTime               @default(now())
    updatedAt DateTime               @updatedAt
    name      String
    user      User                   @relation(fields: [userId], references: [id])
    userId    String
    templates TrainingPlanTemplate[]
}

model TrainingPlanTemplate {
    id         Int          @id @default(autoincrement())
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    plan       TrainingPlan @relation(fields: [planId], references: [id])
    planId     Int
    template   Template     @relation(fields: [templateId], references: [id])
    templateId Int
    day        Int // Day in the plan when this template is scheduled
}
